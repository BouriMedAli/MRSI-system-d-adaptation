name: Run tests and Docker Build

on:
  push:
    branches:
      - eya-KNN  # Modifier selon votre branche de développement
  pull_request:
    branches:
      - eya-KNN  # Modifier si nécessaire

jobs:
  test:
    runs-on: ubuntu-latest  # Utilisation de la dernière version d'Ubuntu

    steps:
      # Étape 1: Vérifier le code source
      - name: Checkout code
        uses: actions/checkout@v2  # Vérifier le code du repository

      # Étape 2: Configurer Python avec la version souhaitée
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # Utilisez la version de Python que vous préférez

      # Étape 3: Créer et activer l'environnement virtuel
      - name: Install dependencies
        run: |
          python -m venv venv  # Créer un environnement virtuel
          . venv/bin/activate  # Activer l'environnement virtuel
          pip install --upgrade pip  # Mettre à jour pip
          pip install -r requirements.txt  # Installer les dépendances à partir du fichier requirements.txt

      # Étape 4: Ajouter le répertoire 'app' au PYTHONPATH
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)/app" >> $GITHUB_ENV  # Ajouter le répertoire 'app' au PYTHONPATH pour éviter les erreurs d'importation

      # Étape 5: Vérification de la version de Python et des packages installés
      - name: Check Python version and installed packages
        run: |
          . venv/bin/activate
          python --version  # Vérifier la version de Python
          pip freeze  # Vérifier les packages installés

      # Étape 6: Exécuter les tests avec pytest
      - name: Run tests
        run: |
          . venv/bin/activate  # Réactiver l'environnement virtuel
          pytest --maxfail=1 --disable-warnings -q  # Exécuter les tests avec pytest

  docker:
    runs-on: ubuntu-latest  # Utilisation de la dernière version d'Ubuntu pour la construction du Docker

    steps:
      # Étape 1: Vérifier le code source
      - name: Checkout code
        uses: actions/checkout@v2  # Vérifier le code du repository

      # Étape 2: Installer Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2  # Configurer Docker Buildx pour la construction multi-architecture

      # Étape 3: Créer l'image Docker
      - name: Build Docker image
        run: |
          docker build -t knn-recommendation-system .  # Construire l'image Docker

      # Étape 4: Tester le conteneur Docker
      - name: Test Docker container
        run: |
          docker run --rm knn-recommendation-system  # Tester l'image Docker créée

      # Étape 5: Connexion à Docker Hub
      - name: Log in to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/eya-KNN'
        uses: docker/login-action@v2
        with:
            username: ${{ secrets.DOCKER_HUB_USERNAME }}
            password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Étape 6: Pousser l'image Docker sur Docker Hub (facultatif)
      - name: Push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/eya-KNN'
        run: |
          docker tag knn-recommendation-system ${{ secrets.DOCKER_HUB_USERNAME }}/knn-recommendation-system:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/knn-recommendation-system:latest
